plugins {
    id 'com.modrinth.minotaur' version '2.+' apply false
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'com.modrinth.minotaur'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()
    // silence missing javadoc comments, we just don't care
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'Jared'
            url = 'https://maven.blamejared.com/'
        }
        maven {
            name = 'Jitpack'
            url = 'https://jitpack.io'
        }
        maven {
            name = 'Shedaniel'
            url = 'https://maven.shedaniel.me/'
        }
        maven {
            name = 'Parchment'
            url = 'https://maven.parchmentmc.org'
        }
        maven {
            name = 'Curse Maven'
            url = 'https://cursemaven.com'
        }
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        flatDir {
            dirs 'libs'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        options.encoding = 'UTF-8'
        options.release = 17
    }

    tasks.withType(Jar).configureEach {
        from rootProject.file("LICENSE")
        from rootProject.file("CHANGELOG.md")
        manifest {
            attributes([
                "Specification-Title"               : modName,
                'Specification-Version'             : modVersion,
                "Specification-Vendor"              : modAuthor,
                'Implementation-Title'              : modName,
                'Implementation-Version'            : modVersion,
                'Implementation-Vendor'             : modAuthor,
                'Implementation-Timestamp'          : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Implementation-Timestamp-Milli'    : System.currentTimeMillis(),
                'Implementation-URL'                : modSourceUrl,
                'Built-On-Java'                     : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'                : minecraftVersion
            ])
        }
        group 'jar'
    }

    tasks.withType(GenerateModuleMetadata) {
        // Disables Gradle's custom module metadata from being published to maven. The
        // metadata includes mapped dependencies which are not reasonably consumable by
        // other mod developers.
        enabled = false
    }
}

import groovy.json.*
import java.util.regex.Pattern

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

task incrementBuildNumber {
    onlyIf { project.hasProperty('uniqueBuildNumber') }
    doLast {
        def propertiesName = 'gradle.properties'
        // build number is stored in global gradle.properties
        def propertiesFile = new File(project.gradle.gradleUserHomeDir, propertiesName)
        if (!propertiesFile.canRead()) { throw new FileNotFoundException("Could not read file ".concat(propertiesName)) }
        def buildNumberMatcher = Pattern.compile("uniqueBuildNumber=(\\d+)").matcher(propertiesFile.getText())
        buildNumberMatcher.find()
        def versionCode = Integer.parseInt(buildNumberMatcher.group(1))
        def propertiesContent = buildNumberMatcher.replaceAll("uniqueBuildNumber=" + ++versionCode)
        propertiesFile.write(propertiesContent)
    }
}

def static getNextVersion(String puzzlesVersion) {
    def puzzlesVersionMatcher = Pattern.compile("(\\d+\\.\\d+)").matcher(puzzlesVersion)
    puzzlesVersionMatcher.find()
    def currentVersion = puzzlesVersionMatcher.group(1)
    return currentVersion.substring(0, currentVersion.indexOf(".") + 1).concat(String.valueOf(Integer.parseInt(currentVersion.substring(currentVersion.indexOf(".") + 1, currentVersion.size())) + 1))
}

task forgeClean(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean'
    ]
}

task fabricClean(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Fabric:clean'
    ]
}

task allClean(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Fabric:clean'
    ]
}

task forgeBuild(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Forge:build'
    ]
}

task fabricBuild(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Fabric:clean',
            ':Fabric:build'
    ]
}

task allBuild(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Fabric:clean',
            ':Common:build',
            ':Forge:build',
            ':Fabric:build'
    ]
}

task commonPublish(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Common:publishMavenJavaPublicationToFuzsModResourcesRepository'
    ]
}

task forgePublish(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Forge:publishMavenJavaPublicationToFuzsModResourcesRepository'
    ]
}

task fabricPublish(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Fabric:clean',
            ':Fabric:publishMavenJavaPublicationToFuzsModResourcesRepository'
    ]
}

task allPublish(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Fabric:clean',
            ':Common:publishMavenJavaPublicationToFuzsModResourcesRepository',
            ':Forge:publishMavenJavaPublicationToFuzsModResourcesRepository',
            ':Fabric:publishMavenJavaPublicationToFuzsModResourcesRepository'
    ]
}

task forgeUploadCurseForge(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Forge:curseforge'
    ]
}

task fabricUploadCurseForge(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Fabric:clean',
            ':Fabric:curseforge'
    ]
}

task allUploadCurseForge(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Fabric:clean',
            ':Forge:curseforge',
            ':Fabric:curseforge'
    ]
}

task forgeUploadModrinth(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Forge:modrinth'
    ]
}

task fabricUploadModrinth(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Fabric:clean',
            ':Fabric:modrinth'
    ]
}

task allUploadModrinth(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Fabric:clean',
            ':Forge:modrinth',
            ':Fabric:modrinth'
    ]
}

task forgeUploadEverywhere(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Forge:curseforge',
            ':Forge:modrinth'
    ]
}

task fabricUploadEverywhere(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Fabric:clean',
            ':Fabric:curseforge',
            ':Fabric:modrinth'
    ]
}

task allUploadEverywhere(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Common:clean',
            ':Forge:clean',
            ':Fabric:clean',
            ':Forge:curseforge',
            ':Forge:modrinth',
            ':Fabric:curseforge',
            ':Fabric:modrinth'
    ]
}

task forgeGenRuns(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Forge:genIntellijRuns'
    ]
}

task forgeClient(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Forge:runClient'
    ]
}

task fabricClient(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Fabric:runClient'
    ]
}

task forgeServer(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Forge:runServer'
    ]
}

task fabricServer(type: GradleBuild) {
    group = '_main'
    tasks = [
            ':Fabric:runServer'
    ]
}
